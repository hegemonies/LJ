Program-> <class>

<class>-> <mod_access_class> class <id> { 
            <mod_access> <statementList>
            <mod_access> <statementInitList>
            <mod_access> <methodList>
            <mod_access> <class>
            <loopList> ?
        } 

<mod_access_class>-> public | private | E

<mod_access>-> public | private | protected | E

<id>-> \b[A-Za-z_][A-Za-z0-9]*

<statementList>-> <statement>; <statementList> | E

<statementInitList>-> <statementInit>; <statementInitList> | E

<statementInit>-> <data_type> <id> = <plus_minus> <number> | 
        <data_type> <id> = <str_const> | 
        <data_type>[] <id> = new <data_type>[<array_size>];

<array_size>-> <number>

<data_type>-> int

<number>-> <real_numbers><number> | E

<real_numbers>-> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<plus_minus>-> + | - | E

<statement>-> <id> |
        <id> = <number>; |
        <id> = <str_const>; | 
        <id> = <method>; |
        <id> = <statement>; |
        <id>[<number>] = <number>; |
        <id>[<number>] = <str_const>; | 
        <id>[<number>] = <method>; |
        <id>[<number>] = <statement>;

<str_const>-> "([A-Za-z0-9]!@#$%^&*()_+-=[]{}<>;:'",./?\|`~ )+"

<methodList>-> <method><methodList> | E

<method>-> <mod_access> <id> (<args_list>) {
            <statementInitList>
            <statementList>
            <methodList>
            <loopList>
        }

<args_list>-> <arg> | <arg>, <args_list>        

<arg>-> <mod_access> <id>

<loopsList>-> <loop> <loopList> | E

<loop>-> while (<expr>) { 
                <statementInitList>
                <statementList>
                <methodList>
                <loopList> 
        }

<expr>-> <statement> <condition> <statement> | 
        <expr> || <expr> | 
        <expr> && <expr>

<condition>-> < | > | == | != | <= | >=

<arithmetic>-> <arithmetic> + <arithmetic> |
        <arithmetic> - <arithmetic> | 
        <arithmetic> * <arithmetic> |
        <arithmetic> / <arithmetic> | 
        ( <arithmetic> ) | 
        <id> | <number>

<conditional_transition>-> if (<expr>) {
                <statementInitList>
                <statementList>
                <methodList>
                <loopList> 
        }