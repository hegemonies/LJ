<Program>: <class>

<modAccessClass>: public | private

<class>: <modAccessClass> class <id> {
        <mainMethod>
        <statementList>
    }

<mainMathod>: public static void main(String[] args) { <statementList> }

<id>: \b[A-Za-z_][A-Za-z0-9]*

<loop>: while (<expression>) {
        <statementList>
    }

<argsInitList>: <dataType> <rvalue> | <argsInitList>, <argsInitList>

<argsCallList>: <rvalue> | <argsCallList>, <argsCallList>  | E

<valueExpr>: <id> |
    <id>[<number>] |
    <id>() |
    <nubmer> |
    <str_const>

// getFirst() возвращает множество терминалов. 
// если нетерминал возвращае пустое значение, пройтись по всем след нетерминалам и найти первый терминал

// getFollow() возвращает множество терминалов следующих за Followd

<expression>: <valueExpr> <condition> <valueExpr> |
    <expr> <logicOperator> <expr> | 
    <id> | 
    <id>[<number>] | 
    <id>() | 
    <id>(<argsCallList>) |
    <id> = <expression> | 
    <number> | 
    <str_const> | 
    <arithmetic> | 
    <expression> <operator> <expression>

<conditional>: if (<expression>) {
        <statementList>
    }

<statementInitList>: <statementInit> <statementInitList> | E

<nativeDataType>: int

<dataType>: <nativeDataType> | <id> | E

<rvalue>: <number> | <str_const> | <id>

<statementInit>: <dataType> <id> = <dataType> <rvalue>; |
    <dataType> <id>[<number>] = <dataType> <rvalue>;

<statementList>: <statement> <statementList> | E

//todo
<number>: <digit><number> | E

<digit>: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

// <str_const>: "([A-Za-z0-9]!@#$%^&*()_+-=[]{}<>;:'",./?\|`~ )+"
<str_const>: .+

<condition>: < | > | == | != | <= | >=

<arithmetic>: <arithmetic> <operator> <arithmetic> |
        ( <expression> ) |
        <id> | <number>

<operator>: + | - | * | / | %

<logicOperator>: && | ||

<statement>: { <statement> } |
    <loop> |
    <conditionalExpr> |
    <expression>;
    <statementInit>; |