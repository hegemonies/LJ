<Program>: 
    <class>

<modAccessClass>: 
    public | 
    private

<class>: 
    <modAccessClass> class <id> {
        <initList>
        <mainMethod>
    }

<mainMethod>: 
    public static void main(String[] args) { 
        <statementList> 
    }

<id>: 
    id
<number>: 
    \-/(-_-)\-/
<str_const>: 
    /-\(-_-)/-\

<loop>: 
    while (<expression>) {
        <statementList>
    }

<rvalue>: 
    <number> | 
    <str_const> | 
    <id>

<argsInitListChanger>: 
    <argsInitList> | 
    E
<argsInitList>:  
    <argInit> | 
    <argsInitList>, <argsInitList>
<argInit>: 
    <nativeDataType><rvalueFork> <rvalue>

<rvalueFork>: [] | E

<argsCallListChanger>: 
    <argsCallList> | E
<argsCallList>: 
    <valueExpr> | 
    <argsCallList>, <argsCallList>

<valueExpr>: 
    <vExpr> |
    <number> |
    <str_const>

<vExpr>: 
    <id> <vExprChange>
<vExprChanger>: 
    <arrayMember> |
    (<argsCallListChanger>) | 
    = <expression> | 
    E

<conditional>: 
    if (<expression>) {
        <statementList>
    } <elseFork>

<elseFork>: 
    else <elseFork1> |
    E

<elseFork1>:
    <conditional> |
    { <statementList> } |
    E

<nativeDataType>: 
    int | 
    char

<initList>: 
    <init> <initList> | 
    E

<init>: 
    <nativeDataType> <id> <forkInit>

<forkInit>: 
    <forkInitFunc> |
    <forkInitVar> |
    <forkInitArray>

<forkInitFunc>: 
    (<argsInitListChanger>) {
        <statementList>
    }
<forkInitVar>: 
    = <valueExpr>;
<forkInitArray>: 
    <arrayMember> = new <nativeDataType><arrayMember>;

<statementList>: 
    <statement> <statementList> |
    E

<condition>: < | > | == | !=

<operator>: + | - | * | / | %

<logicOperator>: && | ||

<arrayMember>: 
    [<arrayMemberFork>]

<arrayMemberFork>:
    <number> |
    <id>

<return>: 
    return <expression>;

<statement>: 
    { <statement> } |
    <loop> |
    <conditional> |
    <expression> |
    <init> |
    <return> |
    ;

<expression>: 
    <valueExpr> <valueFork> |
    <expression> <expressionOptionOperator>

<valueFork>: 
    <condition> <valueExpr> |
    ; |
    E

<expressionOptionOperator>: 
    <logicOperator> <expression> |
    <operator> <expression>